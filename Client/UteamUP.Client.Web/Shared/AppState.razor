@using System.Security.Cryptography
@using System.Text
@using System.IO
@using System.Text.Json
@using Blazor.SubtleCrypto

@using Blazored.LocalStorage
@using UteamUP.Client.Web.Repository.Implementations
@using UteamUP.Client.Web.Repository.Interfaces
@using UteamUP.Shared.States
@using JsonSerializer = System.Text.Json.JsonSerializer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorageService
@inject ICryptoService Crypto
@inject IUserWebRepository UserWebRepository
@inject IUserProfileRepository UserProfileRepository

<CascadingValue Value="@myGlobal">
    @ChildContent
</CascadingValue>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    private string? username;
    private string? oid;
    private string? email;
    
    public GlobalState myGlobal { get; set; }

    public async Task<GlobalState> GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var savedStateJson = await LocalStorageService.GetItemAsStringAsync("globalState");
            
            Console.WriteLine("The user is authenticated");
            
            // Check if the savedState is null or empty
            if (!string.IsNullOrEmpty(savedStateJson))
            {
                Console.WriteLine("The user has a saved state");
                // Load the savedState into the GlobalState
                GlobalState newGlobal = await LocalStorageService.GetItemAsync<GlobalState>("globalState");
                
                Console.WriteLine("Loaded state for : " + newGlobal.Email);
                
                myGlobal = newGlobal;
                
                return myGlobal;
            }
            else
            {
                Console.WriteLine("The user did not have a saved state");
                username = user.FindFirst("name")?.Value;
                oid = user.FindFirst("oid")?.Value;
                email = user.FindFirst("signInNames.emailAddress")?.Value;
                
                if(string.IsNullOrEmpty(oid))
                    throw new Exception("No oid found in the claims");
                
                var myUser = await GetUserInformationFromDB(oid);
                GlobalState newGlobal;
                
                if (!string.IsNullOrEmpty(myUser.Oid))
                {
                    // Save the GlobalState to the local storage
                    newGlobal = new GlobalState { Name = myUser.Name, Email = myUser.Email, Oid = myUser.Oid, FirstLogin = myUser.IsFirstLogin, HasDatabaseUser = true, IsActivated = myUser.IsActive };
                }
                else
                {
                    // Save the GlobalState to the local storage
                    newGlobal = new GlobalState { Name = username, Email = email, Oid = oid, FirstLogin = true};
                }

                // Convert newGlobal to json
                var newGlobalJson = JsonSerializer.Serialize(newGlobal);
                
                await LocalStorageService.SetItemAsStringAsync("globalState", newGlobalJson);
                Console.WriteLine("New state for : " + newGlobal.Email);
                
                myGlobal = newGlobal;

                return myGlobal;
            }
        }
        else
        {
            StateHasChanged();

            return new GlobalState();
        }
    }

    public async Task<GlobalState> GetClaimsPrincipalDataOnlyFromDB()
    {
        GlobalState profile = await UserProfileRepository.GetUserProfile();
        
        // Save the global state to the local storage
        var profileJson = JsonSerializer.Serialize(profile);
        await LocalStorageService.SetItemAsStringAsync("globalState", profileJson);

        return profile;
    }
    
    protected override async void OnInitialized()
    {
        //myGlobal = await this.GetClaimsPrincipalData();
        //Console.WriteLine("Initialized for : " + myGlobal.Email);
        
        myGlobal = await this.GetClaimsPrincipalDataOnlyFromDB();
        Console.WriteLine("Initialized for : " + myGlobal.Email);

    }
    
    private async Task<MUser> GetUserInformationFromDB(string oid)
    {
        // Get the user information from the database
        MUser? user = await UserWebRepository.GetUserByOid(oid);

        if(!string.IsNullOrEmpty(user?.Email))
        {
            return user;
        }
        else
        {
            return new MUser();
        }
    }
}