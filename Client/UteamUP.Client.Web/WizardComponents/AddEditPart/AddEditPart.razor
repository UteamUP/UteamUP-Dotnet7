@page "/part-add"
@page "/part-edit/{id:int?}"
@using UteamUP.Client.Web.WizardComponents.AddEditTenant.AddEditTenant.Modals
@using UteamUP.Client.Web.WizardComponents.Template.AddEditTemplate.Forms
@using UteamUP.Client.Web.WizardComponents.AddEditPart.Forms
@using Newtonsoft.Json
@inject HttpClient Http
@inject IHeaderRepository _headerRepository
@inject IMapper Mapper

@inherits WizardBase<PartForm>

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="@(Id == null ? "Create Part" : "Edit Part")"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
        {
            case 0:
                <EditForm Model="@_model.PartBasicForm">
                    <FluentValidationValidator @ref="_fluentValidationValidator" />
                    <HorizonInput Label="Part Name" Placeholder="Type here" @bind-Value="_model.PartBasicForm.Name" />
                    <HorizonSelect Label="Vendor" Placeholder="Type here" Options="@_vendorList" @bind-Value="_model.PartBasicForm.Vendor" SelectetValue="@_selectedVendor"/>
                    <HorizonSelect Label="Select Category" Placeholder="Select here" Options="@_categoryList" @bind-Value="_model.PartBasicForm.Category" SelectetValue="@_selectedCategory"/>
                </EditForm>
                break;
            case 1:
                <EditForm Model="@_model.PartDetailsForm">
                    <FluentValidationValidator @ref="_fluentValidationValidator" />
                    <HorizonInput Label="Serial Number" Placeholder="Type here" @bind-Value="_model.PartDetailsForm.SerialNumber" />
                    <HorizonInput Label="Reference Number" Placeholder="Type here" @bind-Value="_model.PartDetailsForm.ReferenceNumber" />
                    <HorizonInput Label="Part Number" Placeholder="Type here" @bind-Value="_model.PartDetailsForm.PartNumber" />
                    <HorizonInput Label="Model Number" Placeholder="Type here" @bind-Value="_model.PartDetailsForm.ModelNumber" />
                </EditForm>
                break;
            case 2:
                <div class="input-container">
                    <HorizonFileUpload />
                </div>
                break;
            default:
                <div class="input-container">
                    <label>Write Description</label>
                    <HorizonRichTextEditor>
                        <EditorContent>
                            @((MarkupString)@_model.PartDetailsForm.Description)
                        </EditorContent>
                    </HorizonRichTextEditor>
                </div>
                break;
        }
</Form>

@code {
    
    int _tenantId = 0;
    private string _selectedVendor = "";
    private string _selectedCategory = "";
    private GlobalState globalState = new();

    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Template Basic Information", false },
    };
    
    private IDictionary<string, string> _categoryList = new Dictionary<string, string>()
    {
        { "", "" }
    };
    
    private IDictionary<string, string> _vendorList = new Dictionary<string, string>()
    {
        { "", "" }
    };
    private async Task<GlobalState> GetGlobalState()
    {
        return await LocalStorageService.GetItemAsync<GlobalState>("globalState");
    }
    protected override async Task OnInitializedAsync()
    {
        _model = new PartForm();
        Http.DefaultRequestHeaders.Authorization = await _headerRepository.GetHeaderAsync();

        globalState = await GetGlobalState();

        _tenantId = globalState.DefaultTenantId;
    }
    
    private void OpenModal(string ErrorTitle, string ErrorDetails)
    {
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
            HideCloseButton = false,
        };
        
        var parameters = new ModalParameters();
        parameters.Add(ErrorTitle, ErrorDetails);

        ModalService.Show<ErrorTenantModal>("ErrorDetails", parameters, options);
    }

    private async Task OnClickSubmitButtonAsync()
    {
        Console.WriteLine("Click Submit Button");
    }
    
    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}