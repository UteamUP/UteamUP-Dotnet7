@page "/workorder-add"
@page "/workorder-edit/{id:int?}"
@using UteamUP.Client.Web.WizardComponents.AddEditTenant.AddEditTenant.Modals
@using UteamUP.Client.Web.WizardComponents.Template.AddEditTemplate.Forms
@using Newtonsoft.Json
@using UteamUP.Client.Web.WizardComponents.AddEditWorkorder.Forms
@inject HttpClient Http
@inject IHeaderRepository _headerRepository
@inject IMapper Mapper

@inherits WizardBase<UteamUP.Client.Web.WizardComponents.AddEditWorkorder.Forms.WorkorderForm>

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="@(Id == null ? "Create Template" : "Edit Template")"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_model.WorkorderBasicForm">
                <FluentValidationValidator @ref="_fluentValidationValidator" />
                <HorizonInput Label="Template Name" Placeholder="Type in the name of the template" @bind-Value="@_model.WorkorderBasicForm.Name"/>
            </EditForm>
            break;
        default:
            break;
    }
</Form>

@code {
    int _tenantId = 0;
    private GlobalState globalState = new();
    
    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Template Basic Information", false },
    };
    private async Task<GlobalState> GetGlobalState()
    {
        return await LocalStorageService.GetItemAsync<GlobalState>("globalState");
    }
    protected override async Task OnInitializedAsync()
    {
        _model = new WorkorderForm();
        Http.DefaultRequestHeaders.Authorization = await _headerRepository.GetHeaderAsync();

        _tenantId = globalState.DefaultTenantId;
    }
    
    private void OpenModal(string ErrorTitle, string ErrorDetails)
    {
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
            HideCloseButton = false,
        };
        
        var parameters = new ModalParameters();
        parameters.Add(ErrorTitle, ErrorDetails);

        ModalService.Show<ErrorTenantModal>("ErrorDetails", parameters, options);
    }

    private async Task OnClickSubmitButtonAsync()
    {
        Console.WriteLine("Click Submit Button");
    }
    
    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}