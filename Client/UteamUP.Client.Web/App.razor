@namespace UteamUP.Client
@inject IUserProfileRepository UserProfileRepository
@inject IUserWebRepository UserWebRepository
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <CascadingBlazoredModal HideCloseButton="true">
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                    
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        @if (context.User.Identity?.IsAuthenticated != true)
                        {
                            <RedirectToLogin/>
                        }
                        else
                        {
                            <p role="alert">You are not authorized to access this resource.</p>
                        }
                    </NotAuthorized>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingBlazoredModal>
</CascadingAuthenticationState>

@code {
    public GlobalState myGlobal { get; set; }

    public async Task<GlobalState> GetClaimsPrincipalDataOnlyFromDB()
    {
        // Check if the user state is already in the local storage
        var globalState = await LocalStorageService.GetItemAsync<GlobalState>("globalState");
        if (globalState != null)
        {
            // Check if the user state is still valid by checking the LastUpdated is less than two hours
            if (globalState.LastUpdated.AddHours(2) > DateTime.Now)
            {
                return globalState;
            }
        }
        
        GlobalState profile = await UserProfileRepository.GetUserProfile(); 
        await LocalStorageService.SetItemAsync("globalState", profile);
        StateHasChanged();

        return profile;
    }
    protected override async Task OnInitializedAsync()
    {
        // Check if the user is authenticated
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            myGlobal = await this.GetClaimsPrincipalDataOnlyFromDB();
        }
        else
        {
            // If the user is not authenticated and the globalState exists in the local storage, remove it
            var globalState = await LocalStorageService.GetItemAsync<GlobalState>("globalState");
            if (globalState != null)
            {
                await LocalStorageService.RemoveItemAsync("globalState");
            }
            
            Console.WriteLine("User is not authenticated");
        }
        
    }
    
    private void RefreshPage()
    {
        StateHasChanged();
    }
}