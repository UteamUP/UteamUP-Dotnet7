@namespace UteamUP.Client
@inject CustomAuthenticationStateProvider CustomAuthStateProvider

<CascadingAuthenticationState>
    <CascadingBlazoredModal HideCloseButton="true">
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                    
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        @if (context.User.Identity?.IsAuthenticated != true)
                        {
                            <RedirectToLogin/>
                        }
                        else
                        {
                            <p role="alert">You are not authorized to access this resource.</p>
                        }
                    </NotAuthorized>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingBlazoredModal>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        var authState = await CustomAuthStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity.IsAuthenticated)
        {
            var globalState = await CustomAuthStateProvider.GetGlobalStateAsync();
            Console.WriteLine("The user is authenticated, lets check if the global state is up to date");
            if(globalState != null){
                if (!globalState.IsUpToDate)
                {
                    Console.WriteLine("Lets try to update the users state, since it is not up to date");
                    await CustomAuthStateProvider.UpdateAppStateWithUserAsync(authState.User);
                    await CustomAuthStateProvider.UpdateDateAsync();
                }
                
                // If globalState.LastUpdated is 10 hours from now or more then update the global state
                if (globalState.LastUpdated.AddHours(1) < DateTime.Now.ToUniversalTime())
                {
                    Console.WriteLine("Lets try to update the global state, since the last update was more than 10 hours ago");
                    await CustomAuthStateProvider.UpdateAppStateWithUserAsync(authState.User);
                    await CustomAuthStateProvider.UpdateDateAsync();
                }
                if(globalState.ActiveTenant == null)
                {
                    Console.WriteLine("Lets try to update the global state, since the active tenant is null");
                    await CustomAuthStateProvider.UpdateTenantStateAsync();
                    await CustomAuthStateProvider.UpdateDateAsync();
                }
            }
            else
            {
                Console.WriteLine("Lets try to create the users state");
                await CustomAuthStateProvider.UpdateAppStateWithUserAsync(authState.User);
                await CustomAuthStateProvider.UpdateDateAsync();
            }
        }
        CustomAuthStateProvider.OnGlobalStateChanged += RefreshPage;
    }
    
    private void RefreshPage()
    {
        StateHasChanged();
    }
}