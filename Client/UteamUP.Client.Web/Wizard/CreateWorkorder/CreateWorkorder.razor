@page "/create-workorder"
@using UteamUP.Client.Wizard.ActivateUser.Forms
@using UteamUP.Client.Components.Enums
@using UteamUP.Client.Web.Repository.Interfaces

@inject IUserWebRepository UserWebRepository

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="Create Workorder"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_model">
                <HorizonInput Label="Workorder Name" Placeholder="Type in the subject of the workorder" @bind-Value="@_model.ActivationNumber"/>
                <HorizonInput Label="Priority" Placeholder="Select the priority" @bind-Value="@_model.ActivationNumber"/>
                <HorizonInput Label="Status" Placeholder="Select the status" @bind-Value="@_model.ActivationNumber"/>
                <HorizonInput Label="Assign User" Placeholder="Select the status" @bind-Value="@_model.ActivationNumber"/>
                <HorizonInput Label="Assign Asset" Placeholder="Select the status" @bind-Value="@_model.ActivationNumber"/>
            </EditForm>
            break;
        case 1:
            <EditForm Model="@_model">
                <HorizonInput Label="Start Date" Placeholder="Type in the subject of the workorder" @bind-Value="@_model.ActivationNumber"/>
                <HorizonInput Label="End Date" Placeholder="Select the priority" @bind-Value="@_model.ActivationNumber"/>
                <HorizonInput Label="Stop Required" Placeholder="Select the priority" @bind-Value="@_model.ActivationNumber"/>
            </EditForm>
            break;
        case 2:
            <EditForm Model="@_model">
                <HorizonInput Label="Description" Placeholder="Description" @bind-Value="@_model.ActivationNumber"/>
                <HorizonInput Label="Notes" Placeholder="Other Notes" @bind-Value="@_model.ActivationNumber"/>
            </EditForm>
            break;
        default:
            break;
    }
</Form>

@code {
    string? _oid = "";
    string? _name = "";
    string? _email = "";

    AddNewWorkorderForm _model = new AddNewWorkorderForm();

    protected int _activeStepIndex = 0;
    private GlobalState globalState = new();
    private async Task<GlobalState> GetGlobalState()
    {
        return await LocalStorageService.GetItemAsync<GlobalState>("globalState");
    }
    
    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Activation Information", false },
    };

    FluentValidationValidator? _fluentValidationValidator;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        globalState = await GetGlobalState();

        _oid = globalState.Oid;
        _name = globalState.Name;
        _email = globalState.Email;

        _model.ActivationNumber = "";
    }

    private async Task OnClickSubmitButtonAsync()
    {
        Console.WriteLine("Submit button clicked");

    // Save create the plan and redirect to global page
        var results = await UserWebRepository.ActivateUser(_model.ActivationNumber, globalState.Oid);
        if (results == false)
            // TODO: Should popup an error box in the client
            throw new Exception("Could not activate the user");
        else
            NavigationManager.NavigateTo("/global");
    }

    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}