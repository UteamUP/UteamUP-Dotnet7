@page "/create-vendor"
@using UteamUP.Client.Web.Repository.Interfaces
@using UteamUP.Client.Web.Wizard.CreateVendor.Forms

@inject IVendorWebRepository VendorWebRepository

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="Create Vendor"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_model.BasicVendorInfoForm">
                <HorizonInput Label="Vendor Name" Placeholder="Type in the subject of the workorder" @bind-Value="@_model.BasicVendorInfoForm.Name"/>
                <HorizonInput Label="Email" Placeholder="Select the priority" @bind-Value="@_model.BasicVendorInfoForm.Email"/>
                <HorizonInput Label="Phone Number" Placeholder="Select the status" @bind-Value="@_model.BasicVendorInfoForm.PhoneNumber"/>
                <HorizonInput Label="Website" Placeholder="Select the status" @bind-Value="@_model.BasicVendorInfoForm.WebSite"/>
            </EditForm>
            break;
        case 1:
            <EditForm Model="@_model.VendorDetailsForm">
                <div class="input-container">
                    <label class="form-label">Description</label>
                    <HorizonRichTextEditor Height="300px">
                        <EditorContent>
                            @((MarkupString)@_model.VendorDetailsForm.Description)
                        </EditorContent>
                    </HorizonRichTextEditor>
                </div>
            </EditForm>
            break;
        default:
            break;
    }
</Form>

@code {
    string? _oid = "";
    string? _name = "";
    string? _email = "";
    
    string? _opensAt = "";
    string? _closesAt = "";

    AddNewVendorForm _model = new AddNewVendorForm();

    protected int _activeStepIndex = 0;
    private GlobalState globalState = new();
    private async Task<GlobalState> GetGlobalState()
    {
        return await LocalStorageService.GetItemAsync<GlobalState>("globalState");
    }
    
    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Vendor Basic Information", false },
        { "Vendor Description", false },
    };

    FluentValidationValidator? _fluentValidationValidator;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        globalState = await GetGlobalState();


        _oid = globalState.Oid;
        _name = globalState.Name;
        _email = globalState.Email;
        
        _model.BasicVendorInfoForm.Name = "UteamUP Vendor";
        _model.BasicVendorInfoForm.Email = "uteamup@uteamup.com";
        _model.BasicVendorInfoForm.PhoneNumber = "123123123";
        _model.BasicVendorInfoForm.WebSite = "https://uteamup.com";
        _model.VendorDetailsForm.Description = "Some description";
    }

    private async Task OnClickSubmitButtonAsync()
    {
        Console.WriteLine("Submit button clicked");

        // Create a new vendor object
        VendorDto newVendorDto = new VendorDto()
        {
            Name = _model.BasicVendorInfoForm.Name,
            Email = _model.BasicVendorInfoForm.Email,
            PhoneNumber = _model.BasicVendorInfoForm.PhoneNumber,
            WebSite = _model.BasicVendorInfoForm.WebSite,
            Description = _model.VendorDetailsForm.Description
        };
        
    // Save create the plan and redirect to global page
        var results = await VendorWebRepository.CreateAsync(newVendorDto);
        if (results == false)
            // TODO: Should popup an error box in the client
            throw new Exception("Could not activate the user");
        else
            NavigationManager.NavigateTo("/global");
    }

    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}