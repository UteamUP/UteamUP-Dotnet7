@page "/create-invite"
@using UteamUP.Client.Web.Wizard.CreateTenantInvites.Forms

@inject ITenantWebRepository TenantWebRepository

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="Create Tenant Invite"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_tenants">
                <HorizonSelect Options="@_tenants" Label="Select Tenant" Placeholder="Choose Tenant" @bind-Value="_selectedTenant"/>
            </EditForm>
            break;
        case 1:
            <EditForm Model="@_model.UserInviteForm">
                <div>
                    <div>
                        <HorizonEmailChipInput Label="Email Addresses" @bind-Value="_emailAddresses"/>
                    </div>
                </div>
            </EditForm>
            break;
        default:
            break;
    }
</Form>

@code {
    private List<string> _emailAddresses = new();

    string? _oid = "";
    string? _name = "";
    string? _email = "";

    string _selectedTenant = "Tenant";

    AddNewTenantInviteForm _model = new();

    protected int _activeStepIndex = 0;
    private GlobalState globalState = new();
    private async Task<GlobalState> GetGlobalState()
    {
        return await LocalStorageService.GetItemAsync<GlobalState>("globalState");
    }
    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Select Tenant", false },
        { "Invite Emails", false }
    };


    private IDictionary<string, string> _tenants = new Dictionary<string, string>()
    {
        { "Tenant", "Tenant" }
    };

    FluentValidationValidator? _fluentValidationValidator;

    protected override async Task OnInitializedAsync()
    {
    //await base.OnParametersSetAsync();
        await base.OnInitializedAsync();
        globalState = await GetGlobalState();

        _oid = globalState.Oid;
        _name = globalState.Name;
        _email = globalState.Email;

    // Get all the tenants for the user
        var tenants = await TenantWebRepository.GetOwnedTenantsAsync(_oid);

        if (tenants.Count >= 1)
        {
            _tenants.Clear();
        }

    // Update _tenants with the tenants list
        foreach (var tenant in tenants)
        {
            _tenants.Add(tenant.Name, tenant.Id.ToString());
        }
    }

    private async Task OnClickSubmitButtonAsync()
    {
        Console.WriteLine("Submit button clicked");

    // Save create the plan and redirect to global page
    //var results = await UserWebRepository.ActivateUser(_model.ActivationNumber, globalState.Oid);
    //if (results == false)
    //    // TODO: Should popup an error box in the client
    //    throw new Exception("Could not activate the user");
    //else
    //    NavigationManager.NavigateTo("/global");
    }

    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}