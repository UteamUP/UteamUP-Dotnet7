@page "/create-asset"
@using UteamUP.Client.Wizard.ActivateUser.Forms
@using UteamUP.Client.Web.Repository.Interfaces

@inject IVendorWebRepository VendorWebRepository
@inject ICategoryWebRepository CategoryWebRepository
@inject IAssetWebRepository AssetWebRepository
@inject ITagWebRepository TagWebRepository
@inject ILocationWebRepository LocationWebRepository
@inject IPartWebRepository PartWebRepository

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="Create Asset"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_model.BasicAssetForm">
                <HorizonInput Label="Name" Placeholder="Type in the name of the asset" @bind-Value="@_model.BasicAssetForm.Name"/>
                <HorizonSelect Options="@_categoryList" Label="Select Category" Placeholder="Type here" @bind-Value="_model.BasicAssetForm.Category"/>
                <HorizonSelect Options="@_vendorList" Label="Select Vendors" Placeholder="Type here" @bind-Value="_model.BasicAssetForm.VendorName"/>
                <HorizonChipTag Label="Tags" @bind-Value="_tagNames" Placeholder="Type in the tags for the asset"/>
            </EditForm>
            break;
        case 1:
            <EditForm Model="@_model.AssetDetailsForm">
                <HorizonInput Label="Serial Number" Placeholder="Type in the serial number" @bind-Value="@_model.AssetDetailsForm.SerialNumber"/>
                <HorizonInput Label="Reference Number" Placeholder="Type in the reference number" @bind-Value="@_model.AssetDetailsForm.ReferenceNumber"/>
                <HorizonInput Label="Model Number" Placeholder="Type in the model number" @bind-Value="@_model.AssetDetailsForm.ModelNumber"/>
                <HorizonInput Label="UPC Number" Placeholder="Type in the upc number" @bind-Value="@_model.AssetDetailsForm.UPCNumber"/>
            </EditForm>
            break;
        case 2:
            <EditForm Model="@_model.AssetDescriptionForm">
                <div class="input-container">
                    <label class="form-label">Description</label>
                    <HorizonRichTextEditor Height="300px">
                        <EditorContent>
                            @((MarkupString)@_model.AssetDescriptionForm.Description)
                        </EditorContent>
                    </HorizonRichTextEditor>
                </div>
            </EditForm>
            break;
        case 3:
            <EditForm Model="@_model.AssetNotesForm">
                <div class="input-container">
                    <label class="form-label">Notes</label>
                    <HorizonRichTextEditor Height="300px">
                        <EditorContent>
                            @((MarkupString)@_model.AssetNotesForm.Notes)
                        </EditorContent>
                    </HorizonRichTextEditor>
                </div>
            </EditForm>
            break;
        default:
            break;
    }
</Form>

@code {
    bool _stopRequired = false;

    List<Vendor> _vendors = new();
    List<Category> _categories = new();
    private List<string> _tagNames = new List<string>();
    private List<Location> _locations = new List<Location>();
    private List<Part> _parts = new List<Part>();
    
    AddNewAssetForm _model = new();

    protected int _activeStepIndex = 0;

    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Basic Information", false },
        { "Model Information", false },
        { "Description", false },
        { "Notes", false }
    };

    private IDictionary<string, string> _vendorList = new Dictionary<string, string>()
    {
        { "", "" }
    };
    
    private IDictionary<string, string> _categoryList = new Dictionary<string, string>()
    {
        { "", "" }
    };
    
    private IDictionary<string, string> _locationList = new Dictionary<string, string>()
    {
        { "", "" }
    };
    
    private IDictionary<string, string> _partList = new Dictionary<string, string>()
    {
        { "", "" }
    };
    
    FluentValidationValidator? _fluentValidationValidator;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Get selected tenant
        var globalState = await LocalStorageService.GetItemAsync<GlobalState>("globalState");
        if(globalState.DefaultTenantId == null || globalState.DefaultTenantId == 0)
            throw new Exception("No tenant selected");

        _vendors = await VendorWebRepository.GetAllAsync();
        if(_vendors.Count != 0)
            _vendorList = _vendors.ToDictionary(x => x.Name, x => x.Id.ToString());
        
        _categories = await CategoryWebRepository.GetAllCategoriesByTenantIdAsync(globalState.DefaultTenantId);
        if(_categories.Count != 0)
            _categoryList = _categories.ToDictionary(x => x.Name, x => x.Id.ToString());
        
        //_locations = await LocationWebRepository.GetAllLocationsByTenantIdAsync(globalState.DefaultTenantId);
        //if(_locations != null)
        //    _locationList = _locations.ToDictionary(x => x.Name, x => x.Id.ToString());
        
        _parts = await PartWebRepository.GetAllPartsByTenantIdAsync(globalState.DefaultTenantId);
        if(_parts != null)
            _partList = _parts.ToDictionary(x => x.Name, x => x.Id.ToString());
        
        // pRINT OUT the _tagNames
        foreach(var tag in _tagNames)
            Console.WriteLine(tag);

        _model.BasicAssetForm.Name = "Cutter 1x2";
        _model.BasicAssetForm.Category = "electric";
        _model.BasicAssetForm.VendorName = "UteamUP Vendor";
        
        _model.AssetDetailsForm.SerialNumber = "8376671-234U78U3-23I73";
        _model.AssetDetailsForm.ReferenceNumber = "SER-1X2-123";
        _model.AssetDetailsForm.ModelNumber = "MOD1X2-CUTTER";
        _model.AssetDetailsForm.UPCNumber = "821028937864";
        
        _model.AssetDescriptionForm.Description = "Cutter for cutting a one thing into two things, and make it look good.";
        
        _model.AssetNotesForm.Notes = "This is a note for the cutter. It is a very good cutter. It cuts things very well.";
        
        _tagNames.AddRange(new List<string>() { "cutter", "1x2" });
        
    }

    private async Task OnClickSubmitButtonAsync()
    {
        Console.WriteLine("Submit button clicked");

        // Create a list of tags and find the tags that are in the database based on the _tagNames and add them to the list
        List<Tag> tags = new List<Tag>();
        foreach(var tagName in _tagNames)
        {
            var tag = await TagWebRepository.GetTagByNameAsync(tagName);
            if(tag != null)
                tags.Add(tag);
            
            // if the tag does not exist create it
            else
            {
                List<TagDto> TagList = new List<TagDto>();
                TagDto newTag = new TagDto();
                newTag.Name = tagName;
                TagList.Add(newTag);
                
                await TagWebRepository.CreateManyAsync(TagList);
                tag = await TagWebRepository.GetTagByNameAsync(tagName);
                tags.Add(tag);
            }
        }
        
        AssetDto newAsset = new AssetDto();
        newAsset.Name = _model.BasicAssetForm.Name;
        newAsset.Category = _categories.Where(x => x.Name == _model.BasicAssetForm.Category).FirstOrDefault();
        newAsset.Vendor = _vendors.Where(x => x.Name == _model.BasicAssetForm.VendorName).FirstOrDefault();
        newAsset.SerialNumber = _model.AssetDetailsForm.SerialNumber;
        newAsset.ReferenceNumber = _model.AssetDetailsForm.ReferenceNumber;
        newAsset.ModelNumber = _model.AssetDetailsForm.ModelNumber;
        newAsset.UpcNumber = _model.AssetDetailsForm.UPCNumber;
        newAsset.Description = _model.AssetDescriptionForm.Description;
        newAsset.Notes = _model.AssetNotesForm.Notes;
        newAsset.CheckInProcedure = _model.AssetCheckForm.CheckInProcedure;
        newAsset.CheckOutProcedure = _model.AssetCheckForm.CheckOutProcedure;
        newAsset.IsActive = _model.BasicAssetForm.IsActive;

        newAsset.Tags = tags;
        
        var results = await AssetWebRepository.CreateAssetAsync(newAsset);
        if (!string.IsNullOrWhiteSpace(results.Name))
        {
            NavigationManager.NavigateTo("/global");
        }
        else
        {
            // TODO: Should popup an error box in the client
            throw new Exception("Could not create the asset");
        }
    }

    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}