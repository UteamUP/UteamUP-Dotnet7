@page "/create-location"
@using UteamUP.Client.Wizard.ActivateUser.Forms
@using UteamUP.Client.GlobalRepository.Interfaces
@using UteamUP.Client.Web.Repository.Interfaces

@inject ITagWebRepository MyTagWebRepository
@inject ILocationWebRepository MyLocationWebRepository
@inject IWebRepository<Location> LocationWebRepository
@inject IWebRepository<Tenant> TenantWebRepository
@inject IWebRepository<Tag> TagWebRepository
@inject IMapper Mapper

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="Create Location"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_model">
                <HorizonInput Label="Location Name" Placeholder="Type in the name of the location" @bind-Value="@_model.Name"/>
                <HorizonChipTag Label="Tags" @bind-Value="_tagNames" Placeholder="Type in the tags you want to add to the location"/>
            </EditForm>
            break;
        case 1:
            <EditForm Model="@_model">
                <h2>Location Description</h2>
                <div class="input-container">
                    <label class="form-label">Description</label>
                    <HorizonRichTextEditor Height="300px">
                        <EditorContent>
                            @((MarkupString)@_model.Description)
                        </EditorContent>
                    </HorizonRichTextEditor>
                </div>
            </EditForm>
            break;
        default:
            break;
    }
</Form>

@code {
    private List<string> _tagNames = new List<string>();
    private Location location = new Location();
    AddNewLocationForm _model = new AddNewLocationForm();
    private List<int> _tagIds = new List<int>();
    int _tenantId = 0;

    protected int _activeStepIndex = 0;
    private GlobalState globalState = new();
    private async Task<GlobalState> GetGlobalState()
    {
        return await LocalStorageService.GetItemAsync<GlobalState>("globalState");
    }
    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Location Basic Information", false },
        { "Location Details", false },
    };

    FluentValidationValidator? _fluentValidationValidator;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        globalState = await GetGlobalState();

        _model.Name = "Section One";
        _model.Description = "Section One Description";
        _tagNames.AddRange(new List<string>() { "TeamField 1", "TeamField 2", "TeamField 3" });
        _tenantId = globalState.DefaultTenantId;
    }
    
    
    private async Task OnClickSubmitButtonAsync()
    {
        foreach (var tagName in _tagNames)
        {
            var tag = await TagWebRepository.GetByNameAndTenantId(tagName, "api/tag", _tenantId);
            Console.WriteLine("The tag id is: " + tag.Id);

            if (tag != null)
            {
                _tagIds.Add(tag.Id);
            }
            else
            {
                // Create the tag
                Tag newTag = new Tag();
                newTag.Name = tagName;
                //newTag.TenantId = _tenantId;
                
                var newTagResult = await TagWebRepository.Add(newTag, "api/tag");
                if (newTagResult != null)
                {
                    _tagIds.Add(newTagResult.Id);
                }
            }
        }
        
        /*
        location.Name = _model.Name;
        location.Description = _model.Description;
        location.TenantId = _tenantId;
        location.CreatedAt = DateTime.Now.ToUniversalTime();
        location.UpdatedAt = DateTime.Now.ToUniversalTime();
        
        var result = await LocationWebRepository.Add(location, "api/location");
        if (result != null)
        {
            Console.WriteLine("Location created successfully.");
        }
        else
        {
            Console.WriteLine("Location creation failed.");
        }*/
    }

    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}