@page "/create-part"
@using UteamUP.Client.Web.Repository.Interfaces
@using UteamUP.Client.Web.Wizard.CreatePart.Forms

@inject IUserWebRepository UserWebRepository
@inject IPartWebRepository PartWebRepository
@inject IVendorWebRepository VendorWebRepository
@inject IBlobStorageWebService BlobStorageWebService
@inject ILogger<CreatePart> Logger

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="Create Part"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_model.BasicPartForm">
                <HorizonInput Label="Part Name" Placeholder="Type in the name of the part" @bind-Value="@_model.BasicPartForm.Name"/>
                <HorizonSelect Label="Select the vendor" Placeholder="Type here" Options="@_vendorOptions" @bind-Value="_model.BasicPartForm.VendorName" />
            </EditForm>
            break;
        case 1:
            <EditForm Model="@_model.PartDetailsForm">
                <HorizonInput Label="Serial Number" Placeholder="Type in the serial number" @bind-Value="@_model.PartDetailsForm.SerialNumber"/>
                <HorizonInput Label="Reference Number" Placeholder="Type in the reference number" @bind-Value="@_model.PartDetailsForm.ReferenceNumber"/>
                <HorizonInput Label="Part Number" Placeholder="Type in the part number" @bind-Value="@_model.PartDetailsForm.PartNumber"/>
                <HorizonInput Label="Model Number" Placeholder="Type in the model number" @bind-Value="@_model.PartDetailsForm.ModelNumber"/>
            </EditForm>
            break;
        case 2:
            <div class="input-container">
                <label>Write Description</label>
                <HorizonRichTextEditor Height="300px">
                    <EditorContent>
                        @((MarkupString)@_model.PartDescriptionForm.Description)
                    </EditorContent>
                </HorizonRichTextEditor>
            </div>
            break;
        default:
            break;
    }
</Form>

@code {
    string? _oid = "";
    string? _name = "";
    string? _email = "";
    int _tenantId = 0;
    
    private List<IBrowserFile> uploadedFiles = new(); // Declare the property for uploaded files
    private string[] allowedTypes = new string[] { "image/png", "image/jpeg", "image/gif", "image/svg", "image/tiff", "image/pdf", "image/docx" };

    AddNewPartForm _model = new AddNewPartForm();

    protected int _activeStepIndex = 0;
    private GlobalState globalState = new();
    private async Task<GlobalState> GetGlobalState()
    {
        return await LocalStorageService.GetItemAsync<GlobalState>("globalState");
    }
    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Basic Part Information", false },
        { "Serial Information", false },
        { "Description", false },
    };
    
    private IDictionary<string, string> _vendorOptions = new Dictionary<string, string>()
    {
    };

    FluentValidationValidator? _fluentValidationValidator;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        globalState = await GetGlobalState();

        _oid = globalState.Oid;
        _name = globalState.Name;
        _email = globalState.Email;
        _tenantId = globalState.DefaultTenantId;
        
        // Get the list of vendors
        var vendors = await VendorWebRepository.GetAllAsync();
        foreach (var vendor in vendors)
        {
            _vendorOptions.Add(vendor.Name, vendor.Id.ToString());
        }
        
        _model.BasicPartForm.Name = "Element 115";
        _model.BasicPartForm.VendorName = "UteamUP Vendor";
        
        _model.PartDetailsForm.SerialNumber = "123-321-456";
        _model.PartDetailsForm.ReferenceNumber = "REF-115";
        _model.PartDetailsForm.PartNumber = "PART-115-2023";
        _model.PartDetailsForm.ModelNumber = "UteamUP-115";
        
        //_model.PartUploadForm.UploadPath = "C:\\Users\\Public\\Pictures\\Sample Pictures\\Chrysanthemum.jpg";
        
        _model.PartDescriptionForm.IsPrivate = false;
        _model.PartDescriptionForm.Description = "Element 115 is a energy source that can be used to power up a lot of things. It is a very rare element that can be found in the universe.";
        
    }

    private async Task OnClickSubmitButtonAsync()
    {
        Console.WriteLine("Submit button clicked");

        // Convert _model to PartDto
        var partDto = new PartDto();
        partDto.Name = _model.BasicPartForm.Name;
        partDto.SerialNumber = _model.PartDetailsForm.SerialNumber;
        partDto.ReferenceNumber = _model.PartDetailsForm.ReferenceNumber;
        partDto.PartNumber = _model.PartDetailsForm.PartNumber;
        partDto.ModelNumber = _model.PartDetailsForm.ModelNumber;
        partDto.Description = _model.PartDescriptionForm.Description;
        partDto.IsPrivate = _model.PartDescriptionForm.IsPrivate;
        partDto.ImageUrl = _model.PartUploadForm.UploadPath;
        partDto.AdditionalInfo = _model.PartAdditionalInfoForm.AdditionalInfo;
        partDto.Notes = _model.PartAdditionalInfoForm.Notes;
        
        // Save create the plan and redirect to global page
        var results = await PartWebRepository.CreatePartAsync(partDto);
        if(results.Id != 0){
            // Get the selected vendor Id in the select list
            //var selectedVendorId = _vendorOptions.FirstOrDefault(x => x.Key == _model.BasicPartForm.VendorName).Value;
            
            //Console.WriteLine($"Part created successfully in the database with id: {results.Id} and vendor id: {selectedVendorId}");
            //await SubmitFiles(selectedVendorId);
            NavigationManager.NavigateTo("/global");
        }
        else
        {
            Logger.Log(LogLevel.Warning, "Could not create the part");
        }
    }

    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }
    
    /*
    private void HandleFileChange(List<IBrowserFile> files)
    {
        uploadedFiles = files;
    }

    private void ClearFiles()
    {
        uploadedFiles.Clear();
    }
    
    private async Task SubmitFiles(string vendorId)
    {
        Console.WriteLine($"Total files: {uploadedFiles.Count}");
        if (uploadedFiles != null && uploadedFiles.Any())
        {
            foreach (var file in uploadedFiles)
            {
                var stream = file.OpenReadStream();
                
                if (stream.Length == 0)
                {
                    Console.WriteLine("The file is empty.");
                    Logger.Log(LogLevel.Warning, $"{nameof(SubmitFiles)}: The file {file.Name} is empty.");
                }

                var fileName = file.Name;
                var blobContainerName = "images";
                
                //var blobPath = $"global/{vendorId}/{fileName}";

                
                try{
                    var blobPath = $"{_tenantId.ToString()}/{_oid}/{fileName}";
                    Console.WriteLine($"Saving to {blobPath}");

                    var saved = await BlobStorageWebService.UploadImagesAsync(blobContainerName, stream, fileName, blobPath);
                    if(saved.IsSuccess){
                        Logger.Log(LogLevel.Information, $"{nameof(SubmitFiles)}: File named {fileName} saved successfully, to blob container {blobContainerName}");
                    }
                    else
                    {
                        Logger.Log(LogLevel.Error, $"{nameof(SubmitFiles)}: File named {fileName} failed to save, to blob container {blobContainerName}");
                    }
                }
                catch (Exception ex)
                {
                    Logger.Log(LogLevel.Error, $"{nameof(SubmitFiles)}: Error writing file: {ex.Message}");
                }
            }
        }
    }*/
}