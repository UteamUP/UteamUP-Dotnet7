@page "/activate-user"
@using UteamUP.Client.Wizard.ActivateUser.Forms
@using UteamUP.Client.Components.Enums
@using UteamUP.Client.Web.Repository.Interfaces

@inject IUserWebRepository UserWebRepository

<Form Steps="@_steps"
      BackUrl="/global"
      ActiveStepIndex="@_activeStepIndex"
      Title="Activate User"
      OnClickBackButton="OnClickBackButton"
      OnClickContinueButton="OnClickContinueButtonAsync"
      OnClickSubmitButton="OnClickSubmitButtonAsync">
    @switch (_activeStepIndex)
    {
        case 0:
            <EditForm Model="@_model">
                <HorizonInput Label="Activation Number" Placeholder="Type in the activation number you got in email and click on submit" @bind-Value="@_model.ActivationNumber"/>
                <div>
                    <p>If you have not received your activation number, please click on the "Resend Activation Code" button to have it resent to your registered email address. The delivery may take a few minutes. Upon receipt, you may either click the link provided within the email or copy the code and paste it into the designated box before submitting. If you encounter any issues during the activation process, kindly refer to our support resources available at this link: <a href="mailto:support@uteamup.com?subject=Activation Issue - ref:@globalState.Oid">Email Support</a></p>
                    <HorizonButton Appearance="ButtonAppearance.Secondary">Resend Activation Code</HorizonButton>
                </div>
            </EditForm>
            break;
        default:
            break;
    }
</Form>

@code {
    string? _oid = "";
    string? _name = "";
    string? _email = "";

    AddNewActivateUserForm _model = new AddNewActivateUserForm();

    protected int _activeStepIndex = 0;
    private GlobalState globalState = new();
    private async Task<GlobalState> GetGlobalState()
    {
        return await LocalStorageService.GetItemAsync<GlobalState>("globalState");
    }
    private IDictionary<string, bool> _steps = new Dictionary<string, bool>()
    {
        { "Activation Information", false },
    };

    FluentValidationValidator? _fluentValidationValidator;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        globalState = await GetGlobalState();

        _oid = globalState.Oid;
        _name = globalState.Name;
        _email = globalState.Email;

        _model.ActivationNumber = "";
    }

    private async Task OnClickSubmitButtonAsync()
    {
        Console.WriteLine("Submit button clicked");

    // Save create the plan and redirect to global page
        var results = await UserWebRepository.ActivateUser(_model.ActivationNumber, globalState.Oid);
        if (results == false)
            // TODO: Should popup an error box in the client
            throw new Exception("Could not activate the user");
        else
            NavigationManager.NavigateTo("/global");
    }

    private async Task OnClickContinueButtonAsync()
    {
        _steps[_steps.ElementAt(_activeStepIndex).Key] = true;
        _activeStepIndex = _activeStepIndex + 1;
    }

    private void OnClickBackButton()
    {
        _activeStepIndex = _activeStepIndex - 1;
    }

}